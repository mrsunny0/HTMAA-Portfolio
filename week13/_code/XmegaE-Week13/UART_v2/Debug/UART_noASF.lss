
UART_noASF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  000001b6  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f4  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022a  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000281  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051f  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b1  00000000  00000000  0000132f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e6 eb       	ldi	r30, 0xB6	; 182
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ae 30       	cpi	r26, 0x0E	; 14
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  d2:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <setClock32MHz>:
// PORTS
#define USART USARTD0

void setClock32MHz()
{
	OSC.CTRL = OSC_RC32MEN_bm; // enable 32MHz clock
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm)); // wait for clock to be ready
  e0:	e0 e5       	ldi	r30, 0x50	; 80
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	81 81       	ldd	r24, Z+1	; 0x01
  e6:	81 ff       	sbrs	r24, 1
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <setClock32MHz+0xa>
	CCP = CCP_IOREG_gc; // enable protected register change
  ea:	88 ed       	ldi	r24, 0xD8	; 216
  ec:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch to 32MHz clock
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  f4:	08 95       	ret

000000f6 <setupUART>:
}

void setupUART(uint8_t remap)
{
	// format USART
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, 0);
  f6:	e0 ec       	ldi	r30, 0xC0	; 192
  f8:	f9 e0       	ldi	r31, 0x09	; 9
  fa:	93 e0       	ldi	r25, 0x03	; 3
  fc:	94 83       	std	Z+4, r25	; 0x04
	
	// set BAUDRATE
	USART_Baudrate_Set(&USART, BAUD_VALUE, BAUD_SCALE);
  fe:	97 e1       	ldi	r25, 0x17	; 23
 100:	96 83       	std	Z+6, r25	; 0x06
 102:	94 ea       	ldi	r25, 0xA4	; 164
 104:	97 83       	std	Z+7, r25	; 0x07
	
	// remap if necessary note: pins 2,3 are default
	USART_Tx_Disable(&USART);
 106:	93 81       	ldd	r25, Z+3	; 0x03
 108:	97 7f       	andi	r25, 0xF7	; 247
 10a:	93 83       	std	Z+3, r25	; 0x03
	if (remap) {
 10c:	88 23       	and	r24, r24
 10e:	31 f0       	breq	.+12     	; 0x11c <setupUART+0x26>
		PORTD.REMAP |= PORT_USART0_bm;
 110:	e0 e6       	ldi	r30, 0x60	; 96
 112:	f6 e0       	ldi	r31, 0x06	; 6
 114:	86 85       	ldd	r24, Z+14	; 0x0e
 116:	80 61       	ori	r24, 0x10	; 16
 118:	86 87       	std	Z+14, r24	; 0x0e
 11a:	05 c0       	rjmp	.+10     	; 0x126 <setupUART+0x30>
		} else {
		PORTD.REMAP &= ~(PORT_USART0_bm);
 11c:	e0 e6       	ldi	r30, 0x60	; 96
 11e:	f6 e0       	ldi	r31, 0x06	; 6
 120:	86 85       	ldd	r24, Z+14	; 0x0e
 122:	8f 7e       	andi	r24, 0xEF	; 239
 124:	86 87       	std	Z+14, r24	; 0x0e
	}
	
	// set USART pin
	PORTD.DIRSET = PIN3_bm;
 126:	e0 e6       	ldi	r30, 0x60	; 96
 128:	f6 e0       	ldi	r31, 0x06	; 6
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	82 83       	std	Z+2, r24	; 0x02
	USART_Tx_Enable(&USART);
 132:	e0 ec       	ldi	r30, 0xC0	; 192
 134:	f9 e0       	ldi	r31, 0x09	; 9
 136:	83 81       	ldd	r24, Z+3	; 0x03
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	83 83       	std	Z+3, r24	; 0x03
	USART_Rx_Enable(&USART);
 13c:	83 81       	ldd	r24, Z+3	; 0x03
 13e:	80 61       	ori	r24, 0x10	; 16
 140:	83 83       	std	Z+3, r24	; 0x03
 142:	08 95       	ret

00000144 <sendChar>:
}

void sendChar(char c)
{
	while ((USARTD0.STATUS & USART_DREIF_bm) == 0); // wait until buffer is empty
 144:	e0 ec       	ldi	r30, 0xC0	; 192
 146:	f9 e0       	ldi	r31, 0x09	; 9
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	95 ff       	sbrs	r25, 5
 14c:	fd cf       	rjmp	.-6      	; 0x148 <sendChar+0x4>
	USARTD0.DATA = c;
 14e:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7009c0>
 152:	08 95       	ret

00000154 <sendString>:
}

void sendString(char * text)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
	while(*text) {
 15a:	88 81       	ld	r24, Y
 15c:	88 23       	and	r24, r24
 15e:	31 f0       	breq	.+12     	; 0x16c <sendString+0x18>
 160:	21 96       	adiw	r28, 0x01	; 1
		sendChar(*text++);
 162:	0e 94 a2 00 	call	0x144	; 0x144 <sendChar>
	USARTD0.DATA = c;
}

void sendString(char * text)
{
	while(*text) {
 166:	89 91       	ld	r24, Y+
 168:	81 11       	cpse	r24, r1
 16a:	fb cf       	rjmp	.-10     	; 0x162 <sendString+0xe>
		sendChar(*text++);
	}
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <getChar>:

char getChar()
{
	if (USART.STATUS & USART_RXCIF_bm) {
 172:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7009c1>
 176:	88 23       	and	r24, r24
 178:	1c f4       	brge	.+6      	; 0x180 <getChar+0xe>
		return USART.DATA;
 17a:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7009c0>
 17e:	08 95       	ret
	} else {
		return 0;
 180:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 182:	08 95       	ret

00000184 <main>:

int main(void) 
{
	setClock32MHz();
 184:	0e 94 6d 00 	call	0xda	; 0xda <setClock32MHz>
	setupUART(0);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 7b 00 	call	0xf6	; 0xf6 <setupUART>
		//receivedChar = getChar();
		//if (receivedChar) {
			//sprintf(outputString, "You just typed: %c\n", receivedChar);
			//sendString(outputString);
		//}
		receivedChar = getChar();
 18e:	0e 94 b9 00 	call	0x172	; 0x172 <getChar>
		if (receivedChar == '\n') {
 192:	8a 30       	cpi	r24, 0x0A	; 10
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0xa>
			sendString("HELLO WORLD\n");
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e2       	ldi	r25, 0x20	; 32
 19a:	0e 94 aa 00 	call	0x154	; 0x154 <sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	89 e6       	ldi	r24, 0x69	; 105
 1a2:	98 e1       	ldi	r25, 0x18	; 24
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x20>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x2a>
 1ae:	00 00       	nop
 1b0:	ee cf       	rjmp	.-36     	; 0x18e <main+0xa>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
