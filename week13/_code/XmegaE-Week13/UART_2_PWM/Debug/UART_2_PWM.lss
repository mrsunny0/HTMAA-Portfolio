
UART_2_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802000  00802000  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005d7  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e4  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000295  00000000  00000000  00000abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00000d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f1  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000181  00000000  00000000  00001305  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_clear_bss>:
  b8:	20 e2       	ldi	r18, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a1 30       	cpi	r26, 0x01	; 1
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  cc:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <setClock32MHz>:
		if (str[index]=='\n') { break; }
		index++;
		// if read exceeds str buffer length
		if (index==len) { break; }
	}
}
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
  da:	e0 e5       	ldi	r30, 0x50	; 80
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	81 81       	ldd	r24, Z+1	; 0x01
  e0:	81 ff       	sbrs	r24, 1
  e2:	fd cf       	rjmp	.-6      	; 0xde <setClock32MHz+0xa>
  e4:	88 ed       	ldi	r24, 0xD8	; 216
  e6:	84 bf       	out	0x34, r24	; 52
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  ee:	08 95       	ret

000000f0 <setupPins>:
  f0:	e0 e0       	ldi	r30, 0x00	; 0
  f2:	f6 e0       	ldi	r31, 0x06	; 6
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	81 83       	std	Z+1, r24	; 0x01
  fa:	e0 e4       	ldi	r30, 0x40	; 64
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	81 81       	ldd	r24, Z+1	; 0x01
 100:	80 63       	ori	r24, 0x30	; 48
 102:	81 83       	std	Z+1, r24	; 0x01
 104:	86 81       	ldd	r24, Z+6	; 0x06
 106:	80 61       	ori	r24, 0x10	; 16
 108:	86 83       	std	Z+6, r24	; 0x06
 10a:	85 81       	ldd	r24, Z+5	; 0x05
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	85 83       	std	Z+5, r24	; 0x05
 110:	08 95       	ret

00000112 <setupUART>:
 112:	e0 ec       	ldi	r30, 0xC0	; 192
 114:	f9 e0       	ldi	r31, 0x09	; 9
 116:	93 e0       	ldi	r25, 0x03	; 3
 118:	94 83       	std	Z+4, r25	; 0x04
 11a:	9c e0       	ldi	r25, 0x0C	; 12
 11c:	96 83       	std	Z+6, r25	; 0x06
 11e:	90 e4       	ldi	r25, 0x40	; 64
 120:	97 83       	std	Z+7, r25	; 0x07
 122:	93 81       	ldd	r25, Z+3	; 0x03
 124:	97 7f       	andi	r25, 0xF7	; 247
 126:	93 83       	std	Z+3, r25	; 0x03
 128:	88 23       	and	r24, r24
 12a:	31 f0       	breq	.+12     	; 0x138 <setupUART+0x26>
 12c:	e0 e6       	ldi	r30, 0x60	; 96
 12e:	f6 e0       	ldi	r31, 0x06	; 6
 130:	86 85       	ldd	r24, Z+14	; 0x0e
 132:	80 61       	ori	r24, 0x10	; 16
 134:	86 87       	std	Z+14, r24	; 0x0e
 136:	05 c0       	rjmp	.+10     	; 0x142 <setupUART+0x30>
 138:	e0 e6       	ldi	r30, 0x60	; 96
 13a:	f6 e0       	ldi	r31, 0x06	; 6
 13c:	86 85       	ldd	r24, Z+14	; 0x0e
 13e:	8f 7e       	andi	r24, 0xEF	; 239
 140:	86 87       	std	Z+14, r24	; 0x0e
 142:	e0 e6       	ldi	r30, 0x60	; 96
 144:	f6 e0       	ldi	r31, 0x06	; 6
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	81 83       	std	Z+1, r24	; 0x01
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	e0 ec       	ldi	r30, 0xC0	; 192
 150:	f9 e0       	ldi	r31, 0x09	; 9
 152:	83 81       	ldd	r24, Z+3	; 0x03
 154:	88 60       	ori	r24, 0x08	; 8
 156:	83 83       	std	Z+3, r24	; 0x03
 158:	83 81       	ldd	r24, Z+3	; 0x03
 15a:	80 61       	ori	r24, 0x10	; 16
 15c:	83 83       	std	Z+3, r24	; 0x03
 15e:	08 95       	ret

00000160 <sendChar>:
 160:	e0 ec       	ldi	r30, 0xC0	; 192
 162:	f9 e0       	ldi	r31, 0x09	; 9
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	95 ff       	sbrs	r25, 5
 168:	fd cf       	rjmp	.-6      	; 0x164 <sendChar+0x4>
 16a:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7009c0>
 16e:	08 95       	ret

00000170 <getChar>:
 170:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7009c1>
 174:	88 23       	and	r24, r24
 176:	1c f4       	brge	.+6      	; 0x17e <getChar+0xe>
 178:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7009c0>
 17c:	08 95       	ret
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret

00000182 <main>:

int main(void) 
{
	setClock32MHz();
 182:	0e 94 6a 00 	call	0xd4	; 0xd4 <setClock32MHz>
	setupUART(0);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 89 00 	call	0x112	; 0x112 <setupUART>
	setupPins();
 18c:	0e 94 78 00 	call	0xf0	; 0xf0 <setupPins>
			{
				LED_PORT.OUTCLR |= LED_PIN;
			}
			else if (receivedChar == '1')
			{
				LED_PORT.OUTSET |= LED_PIN;
 190:	00 e0       	ldi	r16, 0x00	; 0
 192:	16 e0       	ldi	r17, 0x06	; 6
		//if (receivedChar == '\n') {
			//sendString("HELLO WORLD\n");
			//_delay_ms(250);
		//}
		
		receivedChar = getChar();
 194:	0e 94 b8 00 	call	0x170	; 0x170 <getChar>
 198:	c8 2f       	mov	r28, r24
 19a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
		if (receivedChar)
 19e:	88 23       	and	r24, r24
 1a0:	c9 f3       	breq	.-14     	; 0x194 <main+0x12>
		{
			sendChar(receivedChar);
 1a2:	0e 94 b0 00 	call	0x160	; 0x160 <sendChar>
			
			if (receivedChar == '0')
 1a6:	c0 33       	cpi	r28, 0x30	; 48
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <main+0x32>
			{
				LED_PORT.OUTCLR |= LED_PIN;
 1aa:	f8 01       	movw	r30, r16
 1ac:	86 81       	ldd	r24, Z+6	; 0x06
 1ae:	80 61       	ori	r24, 0x10	; 16
 1b0:	86 83       	std	Z+6, r24	; 0x06
 1b2:	f0 cf       	rjmp	.-32     	; 0x194 <main+0x12>
			}
			else if (receivedChar == '1')
 1b4:	c1 33       	cpi	r28, 0x31	; 49
 1b6:	71 f7       	brne	.-36     	; 0x194 <main+0x12>
			{
				LED_PORT.OUTSET |= LED_PIN;
 1b8:	f8 01       	movw	r30, r16
 1ba:	85 81       	ldd	r24, Z+5	; 0x05
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	85 83       	std	Z+5, r24	; 0x05
 1c0:	e9 cf       	rjmp	.-46     	; 0x194 <main+0x12>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
